{"version":3,"sources":["Components/Navbar.js","Components/Movie.js","Components/Carousel.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","toggleNavbar","bind","className","role","aria-label","href","src","width","height","alt","onClick","this","aria-expanded","data-target","aria-hidden","id","e","preventDefault","burger","document","querySelector","target","dataset","$target","getElementById","classList","toggle","Component","Movie","state","popularity","vote_count","video","poster_path","adult","backdrop_path","original_language","original_title","genre_ids","title","vote_average","overview","release_date","substring","Math","min","length","Carousel","movies","params","slidesPerView","spaceBetween","loop","navigation","nextEl","prevEl","breakpoints","1024","768","640","320","fetch","then","response","json","result","results","map","movie","key","setState","App","React","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c7043fe0.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport 'bulma/css/bulma.min.css'\n\nexport default class Navbar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.toggleNavbar = this.toggleNavbar.bind(this);\n    }\n\n    render() {\n        return (\n            <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n                <div className=\"navbar-brand\">\n                    <a className=\"navbar-item\" href=\"/\">\n                        <img src=\"https://i.ibb.co/g3XJxD3/logo.png\" width=\"122\" height=\"38\" alt=\"\"/>\n                    </a>\n\n                    <a onClick={this.toggleNavbar} href=\"http://\" role=\"button\" className=\"navbar-burger burger\" aria-label=\"menu\"\n                       aria-expanded=\"false\"\n                       data-target=\"navBarMain\">\n                        <span aria-hidden=\"true\"/>\n                        <span aria-hidden=\"true\"/>\n                        <span aria-hidden=\"true\"/>\n                    </a>\n                </div>\n\n                <div id=\"navBarMain\" className=\"navbar-menu\">\n                    <div className=\"navbar-start\">\n                        <a href=\"/\" className=\"navbar-item\">\n                            Movies\n                        </a>\n\n                        <a href=\"/\" className=\"navbar-item\">\n                            TV Series\n                        </a>\n\n                        <div className=\"navbar-item has-dropdown is-hoverable\">\n                            <a href=\"/\" className=\"navbar-link\">\n                                More\n                            </a>\n\n                            <div className=\"navbar-dropdown\">\n                                <a href=\"/\" className=\"navbar-item\">\n                                    Premium\n                                </a>\n                                <a href=\"/\" className=\"navbar-item\">\n                                    Ads\n                                </a>\n                                <a href=\"/\" className=\"navbar-item\">\n                                    Contact\n                                </a>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"navbar-end\">\n                        <div className=\"navbar-item\">\n                            <div className=\"buttons\">\n                                <a href=\"/\" className=\"button is-primary\">\n                                    <strong>Sign up</strong>\n                                </a>\n                                <a href=\"/\" className=\"button is-light\">\n                                    Log in\n                                </a>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </nav>\n        )\n    }\n\n    toggleNavbar(e) {\n        e.preventDefault();\n\n        let burger = document.querySelector('.navbar-burger');\n\n        const target = burger.dataset.target;\n        let $target = document.getElementById(target);\n\n        burger.classList.toggle('is-active');\n        $target.classList.toggle('is-active');\n\n    }\n}\n","import React, {Component} from 'react';\nimport '../Styles/Movie.css'\n\nclass Movie extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            popularity: '',\n            vote_count: '',\n            video: '',\n            poster_path: '',\n            id: '',\n            adult: '',\n            backdrop_path: '',\n            original_language: '',\n            original_title: '',\n            genre_ids: [],\n            title: '',\n            vote_average: '',\n            overview: '',\n            release_date: ''\n        };\n    }\n\n    render() {\n        return (\n            <a className=\"ui card\" href={\"https://image.tmdb.org/t/p/original\" + this.props.poster_path}>\n                <div className=\"image\">\n                    <img src={\"https://image.tmdb.org/t/p/w154\" + this.props.poster_path} alt={this.props.title}/>\n                </div>\n                <div className=\"content\">\n                    <div\n                        className=\"header\">{this.props.title.substring(0, Math.min(this.props.title.length, 10))}</div>\n                    <div className=\"meta\">\n                        <span className=\"date\">{this.props.release_date}</span>\n                    </div>\n                </div>\n                <div className=\"extra content\">\n                    <p>{this.props.vote_average}</p>\n                </div>\n            </a>\n        );\n    }\n}\n\nexport default Movie;","import React, {Component} from 'react';\nimport Swiper from 'react-id-swiper';\nimport 'swiper/css/swiper.min.css'\nimport Movie from \"./Movie\";\n\nexport default class Carousel extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            movies: [],\n            params: {\n                slidesPerView: 6,\n                spaceBetween: 50,\n                loop: true,\n                // autoplay: {\n                //     delay: 2500,\n                //     disableOnInteraction: false\n                // },\n                navigation: {\n                    nextEl: '.swiper-button-next',\n                    prevEl: '.swiper-button-prev'\n                },\n                breakpoints: {\n                    1024: {\n                        slidesPerView: 6,\n                        spaceBetween: 30\n                    },\n                    768: {\n                        slidesPerView: 4,\n                        spaceBetween: 30\n                    },\n                    640: {\n                        slidesPerView: 3,\n                        spaceBetween: 20\n                    },\n                    320: {\n                        slidesPerView: 2,\n                        spaceBetween: 10\n                    }\n                }\n            },\n        }\n    }\n\n    componentDidMount() {\n        let url = `https://api.themoviedb.org/3/movie/popular?api_key=16c54b5cc29a4cc43c2fe52d3be06784&language=es-es&page=1`;\n        fetch(url)\n            .then(response => response.json())\n            .then(result => {\n                let movies = result.results.map(movie => {\n                    return (\n                        <div key={movie.id} className=\"swiper-slide\">\n                            <Movie\n                                key={movie.id}\n                                poster_path={movie.poster_path}\n                                title={movie.title}\n                                vote_average={movie.vote_average}\n                                original_title={movie.original_title}\n                                release_date={movie.release_date}\n                            />\n                        </div>\n                    );\n                });\n                this.setState({movies})\n            });\n    }\n\n    render() {\n        return this.state.movies.length > 0 ? (\n            <div className=\"ui container\">\n                <Swiper {...this.state.params}>\n                    {this.state.movies}\n                </Swiper>\n            </div>\n        ) : false;\n    }\n}\n","import React from 'react';\nimport Navbar from \"./Components/Navbar\";\nimport Carousel from \"./Components/Carousel\";\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div>\n                <Navbar/>\n                <Carousel/>\n            </div>\n\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'fomantic-ui-css/semantic.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}